{"name":"Bookshelf.LTuple.Basic","instances":[{"typeNames":["Eq","LTuple"],"name":"LTuple.instDecidableEqLTuple","className":"Decidable"}],"imports":["Init","Mathlib.Tactic.Ring"],"declarations":[{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L253-L265","name":"LTuple.eq_take_concat","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.eq_take_concat","doc":"Given a `Tuple` of size `k`, concatenating an arbitrary `Tuple` and taking `k`\nelements yields the original `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L244-L247","name":"LTuple.eq_tuple_eq_take","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.eq_tuple_eq_take","doc":"If two `Tuple`s are equal, then any initial sequences of those two `Tuple`s are\nalso equal.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L232-L238","name":"LTuple.init_eq_take_pred","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.init_eq_take_pred","doc":"Taking `n` elements from a tuple of size `n + 1` is the same as invoking `init`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L224-L227","name":"LTuple.take_subst_last","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.take_subst_last","doc":"Taking all but the last entry of a `Tuple` is the same result, regardless of the\nvalue of the last entry.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L215-L218","name":"LTuple.self_take_size_eq_self","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.self_take_size_eq_self","doc":"Taking `n` entries from a `Tuple` of size `n` should yield the same `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L209-L210","name":"LTuple.nil_take_zero_eq_nil","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.nil_take_zero_eq_nil","doc":"Taking any number of entries from an empty `Tuple` should yield an empty one.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L201-L204","name":"LTuple.self_take_zero_eq_nil","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.self_take_zero_eq_nil","doc":"Taking no entries from any `Tuple` should yield an empty one.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L193-L196","name":"LTuple.take.min_lt_succ_eq","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.take.min_lt_succ_eq","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L185-L196","name":"LTuple.take","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.take","doc":"Take the first `k` entries from the `Tuple` to form a new `Tuple`, or the entire\n`Tuple` if `k` exceeds the number of entries.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L171-L175","name":"LTuple.snoc_eq_init_concat_last","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.snoc_eq_init_concat_last","doc":"`snoc` is equivalent to concatenating the `init` and `last` element together.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L164-L166","name":"LTuple.concat_snoc_snoc_concat","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.concat_snoc_snoc_concat","doc":"Concatenating a `Tuple` to a nonempty `Tuple` moves `concat` calls closer to\nexpression leaves.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L139-L158","name":"LTuple.nil_concat_self_eq_self","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.nil_concat_self_eq_self","doc":"Concatenating `nil` with a `Tuple` yields the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L131-L134","name":"LTuple.self_concat_nil_eq_self","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.self_concat_nil_eq_self","doc":"Concatenating a `Tuple` with `nil` yields the original `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L124-L126","name":"LTuple.concat","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.concat","doc":"Join two `Tuple`s together end to end.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L113-L115","name":"LTuple.cons","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.cons","doc":"Prepends an entry to the start of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L107-L108","name":"LTuple.last","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.last","doc":"Returns the last entry of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L101-L102","name":"LTuple.init","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.init","doc":"Returns all but the last entry of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L96-L96","name":"LTuple.size","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.size","doc":"Returns the number of entries of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L87-L87","name":"LTuple.instDecidableEqLTuple","kind":"instance","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.instDecidableEqLTuple","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L74-L85","name":"LTuple.hasDecEq","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.hasDecEq","doc":"Implements decidable equality for `Tuple Î± m`, provided `a` has decidable\nequality. \n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L62-L68","name":"LTuple.eq_iff_snoc","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.eq_iff_snoc","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L57-L60","name":"LTuple.eq_iff_singleton","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.eq_iff_singleton","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L55-L55","name":"LTuple.eq_nil","kind":"theorem","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.eq_nil","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L48-L49","name":"LTuple.instCoeLTupleMinNatInstMinNatHAddInstHAddInstAddNat","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.instCoeLTupleMinNatInstMinNatHAddInstHAddInstAddNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L45-L46","name":"LTuple.instCoeLTupleHAddNatInstHAddInstAddNatMinInstMinNatOfNatInstOfNatNat","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.instCoeLTupleHAddNatInstHAddInstAddNatMinInstMinNatOfNatInstOfNatNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L42-L43","name":"LTuple.instCoeLTupleHAddNatInstHAddInstAddNatOfNat","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.instCoeLTupleHAddNatInstHAddInstAddNatOfNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L39-L40","name":"LTuple.instCoeLTupleMinNatInstMinNat","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.instCoeLTupleMinNatInstMinNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L36-L37","name":"LTuple.instCoeLTupleOfNatNatInstOfNatNatMinInstMinNat_1","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.instCoeLTupleOfNatNatInstOfNatNatMinInstMinNat_1","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L33-L34","name":"LTuple.instCoeLTupleOfNatNatInstOfNatNatMinInstMinNat","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.instCoeLTupleOfNatNatInstOfNatNatMinInstMinNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L30-L31","name":"LTuple.instCoeOutLTupleMinNatInstMinNatHAddInstHAddInstAddNat","kind":"def","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.instCoeOutLTupleMinNatInstMinNatHAddInstHAddInstAddNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L22-L22","name":"LTuple.snoc","kind":"ctor","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.snoc","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L21-L21","name":"LTuple.nil","kind":"ctor","docLink":"./Bookshelf/LTuple/Basic.html#LTuple.nil","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/LTuple/Basic.lean#L20-L22","name":"LTuple","kind":"inductive","docLink":"./Bookshelf/LTuple/Basic.html#LTuple","doc":"A representation of a possibly empty left-biased tuple. `n`-tuples are defined\nrecursively as follows:\n\n  `â¨xâ, ..., xââ© = â¨â¨xâ, ..., xââââ©, xââ©`\n\nKeep in mind a tuple in Lean already exists but it differs in two ways:\n\n1. It is right associative. That is, `(xâ, xâ, xâ)` evaluates to\n   `(xâ, (xâ, xâ))` instead of `((xâ, xâ), xâ)`.\n2. Internally a tuple is syntactic sugar for nested `Prod` instances. Inputs\n   types of `Prod` are not required to be the same meaning non-homogeneous\n   collections are allowed.\n   \nIn general, prefer using `Prod` over this `Tuple` definition. This exists solely\nfor proving theorems outlined in Enderton's book.\n"}]}