{"name":"Bookshelf.List.Basic","instances":[],"imports":["Init","Mathlib.Data.Fintype.Basic","Mathlib.Tactic.NormNum"],"declarations":[{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L269-L297","name":"List.mem_pairwise_imp_exists_adjacent","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.mem_pairwise_imp_exists_adjacent","doc":"If `x` is a member of the pairwise'd list, there must exist two (adjacent)\nelements of the list, say `x₁` and `x₂`, such that `x = f x₁ x₂`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L254-L263","name":"List.mem_pairwise_imp_length_self_ge_2","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.mem_pairwise_imp_length_self_ge_2","doc":"If the `pairwise` list isn't empty, then the original list must have at least\ntwo elements.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L239-L248","name":"List.len_pairwise_len_cons_sub_one","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.len_pairwise_len_cons_sub_one","doc":"If `List` `xs` is nonempty, then any `pairwise` operation on `xs` has length\n`xs.length - 1`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L229-L233","name":"List.len_pairwise_len_nil_eq_zero","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.len_pairwise_len_nil_eq_zero","doc":"If list `xs` is empty, then any `pairwise` operation on `xs` yields an empty\nlist.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L220-L223","name":"List.pairwise","kind":"def","docLink":"./Bookshelf/List/Basic.html#List.pairwise","doc":"Given a list `xs` of length `k`, produces a list of length `k - 1` where the\n`i`th member of the resulting list is `f xs[i] xs[i + 1]`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L206-L210","name":"List.fin_zipWith_imp_val_lt_length_right","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.fin_zipWith_imp_val_lt_length_right","doc":"An index less than the length of a `zip` is less than the length of the left\noperand.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L196-L200","name":"List.fin_zipWith_imp_val_lt_length_left","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.fin_zipWith_imp_val_lt_length_left","doc":"An index less than the length of a `zip` is less than the length of the left\noperand.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L176-L190","name":"List.zipWith_nonempty_iff_args_nonempty","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.zipWith_nonempty_iff_args_nonempty","doc":"The result of a `zipWith` is nonempty if and only if both arguments are\nnonempty.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L165-L170","name":"List.length_zipWith_self_tail_eq_length_sub_one","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.length_zipWith_self_tail_eq_length_sub_one","doc":"The length of a list zipped with its tail is the length of the tail.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L152-L156","name":"List.some_tail?_imp_cons","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.some_tail?_imp_cons","doc":"If a `List` has a `tail?` defined, it must be nonempty.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L137-L147","name":"List.getLast_eq_get_length_sub_one","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.getLast_eq_get_length_sub_one","doc":"Given nonempty list `xs`, `getLast xs` is equivalent to `get`ting the\n`length - 1`th index.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L127-L131","name":"List.head_eq_get_zero","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.head_eq_get_zero","doc":"Given nonempty list `xs`, `head` is equivalent to `get`ting the `0`th index.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L104-L118","name":"List.mem_iff_exists_get","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.mem_iff_exists_get","doc":"`x` is a member of list `xs` if and only if there exists some index of `xs` that\n`x` corresponds to.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L79-L98","name":"List.get_mem_self","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.get_mem_self","doc":"Any value that can be retrieved via `get` must be a member of the list argument.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L67-L74","name":"List.exists_mem_iff_neq_nil","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.exists_mem_iff_neq_nil","doc":"If there exists a member of a list, the list must be nonempty.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L52-L58","name":"List.neq_nil_iff_length_gt_zero","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.neq_nil_iff_length_gt_zero","doc":"If the length of a list is greater than zero, it cannot be `List.nil`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L39-L47","name":"List.eq_nil_iff_length_zero","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.eq_nil_iff_length_zero","doc":"Only the empty list has length zero.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L26-L34","name":"List.self_neq_nil_imp_exists_mem","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.self_neq_nil_imp_exists_mem","doc":"A list is nonempty if and only if it can be written as a head concatenated with\na tail.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/ad9684f53ec2eee7371f39e8d2f632806ee4e941/Bookshelf/List/Basic.lean#L14-L16","name":"List.get_cons_succ_self_eq_get_tail_self","kind":"theorem","docLink":"./Bookshelf/List/Basic.html#List.get_cons_succ_self_eq_get_tail_self","doc":"Getting an element `i` from a list is equivalent to `get`ting an element `i + 1`\nfrom that list as a tail.\n"}]}