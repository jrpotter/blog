{"name":"MathematicalIntroductionLogic.Tuple.Generic","instances":[{"typeNames":["GTuple"],"name":"GTuple.BEq","className":"BEq"}],"imports":["Init","MathematicalIntroductionLogic.Tuple.Basic"],"declarations":[{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L160-L162","name":"GTuple.snd","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.snd","doc":"Returns the first component of our `GTuple`. For example, the first component of\ntuple `x[x[1, 2], 3, 4]` is `t[3, 4]`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L151-L154","name":"GTuple.norm_eq_fst_eq_take","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.norm_eq_fst_eq_take","doc":"If the normal form of an `GTuple` is equal to a `Tuple`, the `fst` component\nmust be a prefix of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L135-L145","name":"GTuple.self_fst_eq_norm_take","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.self_fst_eq_norm_take","doc":"Given `GTuple α (m, n)`, the `fst` component is equal to an initial segment of\nsize `k` of the tuple in normal form.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L127-L129","name":"GTuple.fst","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.fst","doc":"Returns the first component of our `GTuple`. For example, the first component of\ntuple `x[x[1, 2], 3, 4]` is `t[1, 2]`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L118-L121","name":"GTuple.length","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.length","doc":"Returns the number of entries in the \"shallowest\" portion of the `GTuple`. For\nexample, the length of `x[x[1, 2], 3, 4]` is `3`, despite its size being `4`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L112-L112","name":"GTuple.size","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.size","doc":"Returns the number of entries in the `GTuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L102-L103","name":"GTuple.BEq","kind":"instance","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.BEq","doc":"Implements Boolean equality for `GTuple α n` provided `α` has decidable\nequality.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L90-L92","name":"GTuple.norm_snoc_eq_concat","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.norm_snoc_eq_concat","doc":"Normalizing an `GTuple` is equivalent to concatenating the normalized `fst`\ncomponent with the `snd`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L81-L84","name":"GTuple.norm_snoc_snoc_norm","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.norm_snoc_snoc_norm","doc":"Normalization distributes across `Tuple.snoc` calls.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L73-L76","name":"GTuple.norm_nil_snoc_elim","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.norm_nil_snoc_elim","doc":"Normalization eliminates `snoc` when the `fst` component is `nil`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L62-L68","name":"GTuple.norm_snoc_nil_elim","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.norm_snoc_nil_elim","doc":"Normalization elimates `snoc` when the `snd` component is `nil`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L55-L57","name":"GTuple.norm_snoc_nil_nil_eq_nil","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.norm_snoc_nil_nil_eq_nil","doc":"Normalization of a pseudo-empty `GTuple` yields an empty `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L49-L50","name":"GTuple.norm_nil_eq_nil","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.norm_nil_eq_nil","doc":"Normalization of an empty `GTuple` yields an empty `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L42-L44","name":"GTuple.norm","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.norm","doc":"Converts an `GTuple` into \"normal form\".\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L23-L23","name":"«termG[_]»","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#«termG[_]»","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L21-L21","name":"GTuple.snoc","kind":"ctor","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.snoc","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L20-L20","name":"GTuple.nil","kind":"ctor","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple.nil","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4da324856df0f4a8f49d114748a639fa81ff9b58/MathematicalIntroductionLogic/Tuple/Generic.lean#L19-L21","name":"GTuple","kind":"inductive","docLink":"./MathematicalIntroductionLogic/Tuple/Generic.html#GTuple","doc":"The following describes a so-called \"generic\" tuple. Like a `Tuple`, an\n`n`-tuple is defined recursively like so:\n\n  `⟨x₁, ..., xₙ⟩ = ⟨⟨x₁, ..., xₙ₋₁⟩, xₙ⟩`\n\nUnlike `Tuple`, a \"generic\" tuple bends the syntax above further. For example,\nboth tuples above are equivalent to:\n\n  `⟨⟨x₁, ..., xₘ⟩, xₘ₊₁, ..., xₙ⟩`\n\nfor some `1 ≤ m ≤ n`. This distinction is purely syntactic, but necessary to\nprove certain theorems (e.g. `Chapter0.lemma_0a`). In other words, `Tuple` is an\nalways-normalized variant of an `GTuple`. In general, prefer it over this when\nworking within Enderton's book.\n"}]}