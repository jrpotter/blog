{"name":"MathematicalIntroductionLogic.Tuple.Basic","instances":[{"typeNames":["Eq","Tuple"],"name":"Tuple.instDecidableEqTuple","className":"Decidable"}],"imports":["Init","Mathlib.Tactic.Ring"],"declarations":[{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L263-L275","name":"Tuple.eq_take_concat","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.eq_take_concat","doc":"Given a `Tuple` of size `k`, concatenating an arbitrary `Tuple` and taking `k`\nelements yields the original `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L254-L257","name":"Tuple.eq_tuple_eq_take","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.eq_tuple_eq_take","doc":"If two `Tuple`s are equal, then any initial sequences of those two `Tuple`s are\nalso equal.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L242-L248","name":"Tuple.init_eq_take_pred","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.init_eq_take_pred","doc":"Taking `n` elements from a tuple of size `n + 1` is the same as invoking `init`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L234-L237","name":"Tuple.take_subst_last","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.take_subst_last","doc":"Taking all but the last entry of a `Tuple` is the same result, regardless of the\nvalue of the last entry.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L225-L228","name":"Tuple.self_take_size_eq_self","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.self_take_size_eq_self","doc":"Taking `n` entries from a `Tuple` of size `n` should yield the same `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L219-L220","name":"Tuple.nil_take_zero_eq_nil","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.nil_take_zero_eq_nil","doc":"Taking any number of entries from an empty `Tuple` should yield an empty one.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L211-L214","name":"Tuple.self_take_zero_eq_nil","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.self_take_zero_eq_nil","doc":"Taking no entries from any `Tuple` should yield an empty one.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L203-L206","name":"Tuple.take.min_lt_succ_eq","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.take.min_lt_succ_eq","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L195-L206","name":"Tuple.take","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.take","doc":"Take the first `k` entries from the `Tuple` to form a new `Tuple`, or the entire\n`Tuple` if `k` exceeds the number of entries.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L181-L185","name":"Tuple.snoc_eq_init_concat_last","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.snoc_eq_init_concat_last","doc":"`snoc` is equivalent to concatenating the `init` and `last` element together.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L174-L176","name":"Tuple.concat_snoc_snoc_concat","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.concat_snoc_snoc_concat","doc":"Concatenating a `Tuple` to a nonempty `Tuple` moves `concat` calls closer to\nexpression leaves.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L149-L168","name":"Tuple.nil_concat_self_eq_self","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.nil_concat_self_eq_self","doc":"Concatenating `nil` with a `Tuple` yields the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L141-L144","name":"Tuple.self_concat_nil_eq_self","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.self_concat_nil_eq_self","doc":"Concatenating a `Tuple` with `nil` yields the original `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L134-L136","name":"Tuple.concat","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.concat","doc":"Join two `Tuple`s together end to end.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L123-L125","name":"Tuple.cons","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.cons","doc":"Prepends an entry to the start of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L117-L118","name":"Tuple.last","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.last","doc":"Returns the last entry of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L111-L112","name":"Tuple.init","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.init","doc":"Returns all but the last entry of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L106-L106","name":"Tuple.size","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.size","doc":"Returns the number of entries of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L97-L97","name":"Tuple.instDecidableEqTuple","kind":"instance","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.instDecidableEqTuple","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L84-L95","name":"Tuple.hasDecEq","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.hasDecEq","doc":"Implements decidable equality for `Tuple Î± m`, provided `a` has decidable\nequality. \n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L72-L78","name":"Tuple.eq_iff_snoc","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.eq_iff_snoc","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L67-L70","name":"Tuple.eq_iff_singleton","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.eq_iff_singleton","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L65-L65","name":"Tuple.eq_nil","kind":"theorem","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.eq_nil","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L58-L59","name":"Tuple.instCoeTupleMinNatInstMinNatHAddInstHAddInstAddNat","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.instCoeTupleMinNatInstMinNatHAddInstHAddInstAddNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L55-L56","name":"Tuple.instCoeTupleHAddNatInstHAddInstAddNatMinInstMinNatOfNatInstOfNatNat","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.instCoeTupleHAddNatInstHAddInstAddNatMinInstMinNatOfNatInstOfNatNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L52-L53","name":"Tuple.instCoeTupleHAddNatInstHAddInstAddNatOfNat","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.instCoeTupleHAddNatInstHAddInstAddNatOfNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L49-L50","name":"Tuple.instCoeTupleMinNatInstMinNat","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.instCoeTupleMinNatInstMinNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L46-L47","name":"Tuple.instCoeTupleOfNatNatInstOfNatNatMinInstMinNat_1","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.instCoeTupleOfNatNatInstOfNatNatMinInstMinNat_1","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L43-L44","name":"Tuple.instCoeTupleOfNatNatInstOfNatNatMinInstMinNat","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.instCoeTupleOfNatNatInstOfNatNatMinInstMinNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L40-L41","name":"Tuple.instCoeOutTupleMinNatInstMinNatHAddInstHAddInstAddNat","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.instCoeOutTupleMinNatInstMinNatHAddInstHAddInstAddNat","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L27-L27","name":"Â«termT[_]Â»","kind":"def","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Â«termT[_]Â»","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L25-L25","name":"Tuple.snoc","kind":"ctor","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.snoc","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L24-L24","name":"Tuple.nil","kind":"ctor","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple.nil","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/4790499921089920861e776dc134ebfbfe557c20/MathematicalIntroductionLogic/Tuple/Basic.lean#L23-L25","name":"Tuple","kind":"inductive","docLink":"./MathematicalIntroductionLogic/Tuple/Basic.html#Tuple","doc":"A representation of a tuple. In particular, `n`-tuples are defined recursively\nas follows:\n\n  `â¨xâ, ..., xââ© = â¨â¨xâ, ..., xââââ©, xââ©`\n\nWe allow empty tuples. For a `Tuple`-like type with opposite \"endian\", refer to\n`Mathlib.Data.Vector`.\n\nKeep in mind a tuple in Lean already exists but it differs in two ways:\n\n1. It is right associative. That is, `(xâ, xâ, xâ)` evaluates to\n   `(xâ, (xâ, xâ))` instead of `((xâ, xâ), xâ)`.\n2. Internally a tuple is syntactic sugar for nested `Prod` instances. Inputs\n   types of `Prod` are not required to be the same meaning non-homogeneous\n   collections are allowed.\n   \nIn general, prefer using `Prod` over this `Tuple` definition. This exists solely\nfor proving theorems outlined in Enderton's book.\n"}]}