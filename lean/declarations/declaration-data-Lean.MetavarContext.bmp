{"name":"Lean.MetavarContext","instances":[{"typeNames":["Lean.LocalInstance"],"name":"Lean.instInhabitedLocalInstance","className":"Inhabited"},{"typeNames":["Lean.LocalInstance"],"name":"Lean.instBEqLocalInstance","className":"BEq"},{"typeNames":["Lean.LocalInstance"],"name":"Lean.instHashableLocalInstance","className":"Hashable"},{"typeNames":["Lean.MetavarKind"],"name":"Lean.instInhabitedMetavarKind","className":"Inhabited"},{"typeNames":["Lean.MetavarKind"],"name":"Lean.instReprMetavarKind","className":"Repr"},{"typeNames":["Lean.MetavarDecl"],"name":"Lean.instInhabitedMetavarDecl","className":"Inhabited"},{"typeNames":[],"name":"Lean.instMonadMCtx","className":"Lean.MonadMCtx"},{"typeNames":["StateRefT'","Lean.MetavarContext","ST"],"name":"Lean.instMonadMCtxStateRefT'MetavarContextST","className":"Lean.MonadMCtx"},{"typeNames":["_private.Lean.MetavarContext.0.Lean.DependsOn.M"],"name":"Lean.DependsOn.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.MetavarContext"],"name":"Lean.MetavarContext.instInhabitedMetavarContext","className":"Inhabited"},{"typeNames":["StateRefT'","Lean.MetavarContext","ST"],"name":"Lean.MetavarContext.instMonadMCtxStateRefT'MetavarContextST","className":"Lean.MonadMCtx"},{"typeNames":["Lean.MetavarContext.MkBinding.Exception"],"name":"Lean.MetavarContext.MkBinding.instToStringException","className":"ToString"},{"typeNames":["Lean.MetavarContext.MkBinding.M"],"name":"Lean.MetavarContext.MkBinding.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.ExprStructEq","Lean.Expr","Lean.MetavarContext.MkBinding.M","Lean.ExprStructEq.instBEqExprStructEq","Lean.ExprStructEq.instHashableExprStructEq"],"name":"Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprMInstBEqExprStructEqInstHashableExprStructEq","className":"Lean.MonadHashMapCacheAdapter"},{"typeNames":["Lean.MetavarContext.LevelMVarToParam.M"],"name":"Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.ExprStructEq","Lean.Expr","Lean.MetavarContext.LevelMVarToParam.M"],"name":"Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","className":"Lean.MonadCache"}],"imports":["Init","Lean.Util.MonadCache","Lean.LocalContext"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1362-L1363","name":"Lean.MetavarContext.getExprAssignmentDomain","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentDomain","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1354-L1360","name":"Lean.MetavarContext.levelMVarToParam","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.levelMVarToParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1352-L1352","name":"Lean.MetavarContext.UnivMVarParamResult.expr","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.expr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1351-L1351","name":"Lean.MetavarContext.UnivMVarParamResult.nextParamIdx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.nextParamIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1350-L1350","name":"Lean.MetavarContext.UnivMVarParamResult.newParamNames","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.newParamNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1349-L1349","name":"Lean.MetavarContext.UnivMVarParamResult.mctx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.mctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1348-L1352","name":"Lean.MetavarContext.UnivMVarParamResult","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1338-L1344","name":"Lean.MetavarContext.LevelMVarToParam.main.visitApp","kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.main.visitApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1321-L1344","name":"Lean.MetavarContext.LevelMVarToParam.main","kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1302-L1319","name":"Lean.MetavarContext.LevelMVarToParam.visitLevel","kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.visitLevel","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1291-L1300","name":"Lean.MetavarContext.LevelMVarToParam.mkParamName","kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.mkParamName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1287-L1289","name":"Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1283-L1285","name":"Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1281-L1281","name":"Lean.MetavarContext.LevelMVarToParam.M","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1279-L1279","name":"Lean.MetavarContext.LevelMVarToParam.State.cache","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.cache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1278-L1278","name":"Lean.MetavarContext.LevelMVarToParam.State.nextParamIdx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.nextParamIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1277-L1277","name":"Lean.MetavarContext.LevelMVarToParam.State.paramNames","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.paramNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1276-L1276","name":"Lean.MetavarContext.LevelMVarToParam.State.mctx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.mctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1275-L1279","name":"Lean.MetavarContext.LevelMVarToParam.State","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1273-L1273","name":"Lean.MetavarContext.LevelMVarToParam.Context.except","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.except","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1272-L1272","name":"Lean.MetavarContext.LevelMVarToParam.Context.alreadyUsedPred","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.alreadyUsedPred","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1271-L1271","name":"Lean.MetavarContext.LevelMVarToParam.Context.paramNamePrefix","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.paramNamePrefix","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1270-L1273","name":"Lean.MetavarContext.LevelMVarToParam.Context","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1248-L1266","name":"Lean.MetavarContext.isWellFormed","kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.isWellFormed","doc":"`isWellFormed lctx e` returns true iff\n- All locals in `e` are declared in `lctx`\n- All metavariables `?m` in `e` have a local context which is a subprefix of `lctx` or are assigned, and the assignment is well-formed. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1241-L1242","name":"Lean.MetavarContext.collectForwardDeps","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.collectForwardDeps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1238-L1239","name":"Lean.MetavarContext.abstractRange","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.abstractRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1235-L1236","name":"Lean.MetavarContext.mkForall","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkForall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1232-L1233","name":"Lean.MetavarContext.mkLambda","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1228-L1230","name":"Lean.MetavarContext.mkBinding","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkBinding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1225-L1226","name":"Lean.MetavarContext.revert","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.revert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1222-L1223","name":"Lean.MetavarContext.elimMVarDeps","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.elimMVarDeps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1220-L1220","name":"Lean.MetavarContext.MkBindingM","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1218-L1218","name":"Lean.MetavarContext.MkBindingM.Context.lctx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.lctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1217-L1217","name":"Lean.MetavarContext.MkBindingM.Context.mainModule","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.mainModule","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1216-L1218","name":"Lean.MetavarContext.MkBindingM.Context","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1181-L1212","name":"Lean.MetavarContext.MkBinding.mkBinding","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.mkBinding","doc":"Similar to `LocalContext.mkBinding`, but handles metavariables correctly.\nIf `usedOnly == true` then `forall` and `lambda` expressions are created only for used variables.\nIf `usedLetOnly == true` then `let` expressions are created only for used (let-) variables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1173-L1175","name":"Lean.MetavarContext.MkBinding.abstractRange","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.abstractRange","doc":"Similar to `Expr.abstractRange`, but handles metavariables correctly.\nIt uses `elimMVarDeps` to ensure `e` and the type of the free variables `xs` do not\ncontain a metavariable `?m` s.t. local context of `?m` contains a free variable in `xs`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1164-L1166","name":"Lean.MetavarContext.MkBinding.revert","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.revert","doc":"Revert the variables `xs` from the local context of `mvarId`, returning\nan expression representing the (new) reverted metavariable and the list of\nvariables that were actually reverted (this list will include any forward dependencies).\n\nSee details in the comment at the top of the file.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1150-L1155","name":"Lean.MetavarContext.MkBinding.elimMVarDeps","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.elimMVarDeps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L977-L979","name":"Lean.MetavarContext.MkBinding.reduceLocalContext","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.reduceLocalContext","doc":"Create a new `LocalContext` by removing the free variables in `toRevert` from `lctx`.\nWe use this function when we create auxiliary metavariables at `elimMVarDepsAux`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L949-L973","name":"Lean.MetavarContext.MkBinding.collectForwardDeps","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.collectForwardDeps","doc":"Given `toRevert` an array of free variables s.t. `lctx` contains their declarations,\nreturn a new array of free variables that contains `toRevert` and all variables\nin `lctx` that may depend on `toRevert`.\n\nRemark: the result is sorted by `LocalDecl` indices.\n\nRemark: We used to throw an `Exception.revertFailure` exception when an auxiliary declaration\nhad to be reversed. Recall that auxiliary declarations are created when compiling (mutually)\nrecursive definitions. The `revertFailure` due to auxiliary declaration dependency was originally\nintroduced in Lean3 to address issue https://github.com/leanprover/lean/issues/1258.\nIn Lean4, this solution is not satisfactory because all definitions/theorems are potentially\nrecursive. So, even a simple (incomplete) definition such as\n```\nvariables {α : Type} in\ndef f (a : α) : List α :=\n_\n```\nwould trigger the `Exception.revertFailure` exception. In the definition above,\nthe elaborator creates the auxiliary definition `f : {α : Type} → List α`.\nThe `_` is elaborated as a new fresh variable `?m` that contains `α : Type`, `a : α`, and `f : α → List α` in its context,\nWhen we try to create the lambda `fun {α : Type} (a : α) => ?m`, we first need to create\nan auxiliary `?n` which does not contain `α` and `a` in its context. That is,\nwe create the metavariable `?n : {α : Type} → (a : α) → (f : α → List α) → List α`,\nadd the delayed assignment `?n #[α, a, f] := ?m`, and create the lambda\n`fun {α : Type} (a : α) => ?n α a f`.\nSee `elimMVarDeps` for more information.\nIf we kept using the Lean3 approach, we would get the `Exception.revertFailure` exception because we are\nreverting the auxiliary definition `f`.\n\nNote that https://github.com/leanprover/lean/issues/1258 is not an issue in Lean4 because\nwe have changed how we compile recursive definitions.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L902-L904","name":"Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprMInstBEqExprStructEqInstHashableExprStructEq","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprMInstBEqExprStructEqInstHashableExprStructEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L899-L900","name":"Lean.MetavarContext.MkBinding.preserveOrder","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.preserveOrder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L891-L893","name":"Lean.MetavarContext.MkBinding.instMonadMCtxM","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instMonadMCtxM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L889-L889","name":"Lean.MetavarContext.MkBinding.M","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L888-L888","name":"Lean.MetavarContext.MkBinding.MCore","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.MCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L886-L886","name":"Lean.MetavarContext.MkBinding.Context.mvarIdsToAbstract","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mvarIdsToAbstract","doc":"Set of unassigned metavariables being abstracted. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L884-L884","name":"Lean.MetavarContext.MkBinding.Context.binderInfoForMVars","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.binderInfoForMVars","doc":"When creating binders for abstracted metavariables, we use the following `BinderInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L882-L882","name":"Lean.MetavarContext.MkBinding.Context.preserveOrder","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.preserveOrder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L881-L881","name":"Lean.MetavarContext.MkBinding.Context.mainModule","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mainModule","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L880-L886","name":"Lean.MetavarContext.MkBinding.Context","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L878-L878","name":"Lean.MetavarContext.MkBinding.State.cache","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.cache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L877-L877","name":"Lean.MetavarContext.MkBinding.State.ngen","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.ngen","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L876-L876","name":"Lean.MetavarContext.MkBinding.State.nextMacroScope","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.nextMacroScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L875-L875","name":"Lean.MetavarContext.MkBinding.State.mctx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.mctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L874-L878","name":"Lean.MetavarContext.MkBinding.State","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State","doc":"`MkBinding` and `elimMVarDepsAux` are mutually recursive, but `cache` is only used at `elimMVarDepsAux`.\nWe use a single state object for convenience.\n\nWe have a `NameGenerator` because we need to generate fresh auxiliary metavariables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L861-L867","name":"Lean.MetavarContext.MkBinding.instToStringException","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instToStringException","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L859-L859","name":"Lean.MetavarContext.MkBinding.Exception.revertFailure","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception.revertFailure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L858-L859","name":"Lean.MetavarContext.MkBinding.Exception","kind":"inductive","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L852-L854","name":"Lean.MetavarContext.instMonadMCtxStateRefT'MetavarContextST","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.instMonadMCtxStateRefT'MetavarContextST","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L846-L850","name":"Lean.MetavarContext.incDepth","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.incDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L841-L844","name":"Lean.MetavarContext.isAnonymousMVar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.isAnonymousMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L836-L839","name":"Lean.MetavarContext.getLevelDepth","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getLevelDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L833-L834","name":"Lean.MetavarContext.findLevelDepth?","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findLevelDepth?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L829-L831","name":"Lean.MetavarContext.setMVarType","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarType","doc":"Update the type of the given metavariable. This function assumes the new type is\ndefinitionally equal to the current one "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L823-L825","name":"Lean.MetavarContext.setMVarUserNameTemporarily","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarUserNameTemporarily","doc":"Low-level version of `setMVarUserName`.\nIt does not update the table `userNames`. Thus, `findUserName?` cannot see the modification.\nIt is meant for `mkForallFVars'` where we temporarily set the user facing name of metavariables to get more\nmeaningful binder names.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L809-L815","name":"Lean.MetavarContext.setMVarUserName","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarUserName","doc":"Set the metavariable user facing name.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L802-L804","name":"Lean.MetavarContext.setMVarKind","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L799-L800","name":"Lean.MetavarContext.findUserName?","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findUserName?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L796-L797","name":"Lean.MetavarContext.findDecl?","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L793-L794","name":"Lean.MetavarContext.addLevelMVarDecl","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addLevelMVarDecl","doc":"Low level API for adding/declaring universe level metavariable declarations.\nIt is used to implement actions in the monads `MetaM`, `ElabM` and `TacticM`.\nIt should not be used directly since the argument `(mvarId : MVarId)` is assumed to be \"unique\". "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L786-L788","name":"Lean.MetavarContext.addExprMVarDeclExp","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addExprMVarDeclExp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L765-L784","name":"Lean.MetavarContext.addExprMVarDecl","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addExprMVarDecl","doc":"Low level API for adding/declaring metavariable declarations.\nIt is used to implement actions in the monads `MetaM`, `ElabM` and `TacticM`.\nIt should not be used directly since the argument `(mvarId : MVarId)` is assumed to be \"unique\". "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L760-L760","name":"Lean.MetavarContext.mkMetavarContext","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkMetavarContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L757-L757","name":"Lean.MetavarContext.instInhabitedMetavarContext","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.instInhabitedMetavarContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L751-L752","name":"Lean.localDeclDependsOnPred","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOnPred","doc":"Return true iff the local declaration `localDecl` depends on a free variable `x` s.t. `pf x`, an unassigned metavariable `?m` s.t. `pm ?m` is true. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L747-L748","name":"Lean.dependsOnPred","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.dependsOnPred","doc":"Return true iff `e` depends on a free variable `x` s.t. `pf x`, or an unassigned metavariable `?m` s.t. `pm ?m` is true. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L738-L744","name":"Lean.localDeclDependsOn'","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOn'","doc":"Similar to `localDeclDependsOn`, but `x` can be a free variable or an unassigned metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L729-L735","name":"Lean.exprDependsOn'","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.exprDependsOn'","doc":"Similar to `exprDependsOn`, but `x` can be a free variable or an unassigned metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L725-L726","name":"Lean.localDeclDependsOn","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOn","doc":"Return true iff `localDecl` depends on the free variable `fvarId` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L721-L722","name":"Lean.dependsOn","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.dependsOn","doc":"Return true iff `e` depends on the free variable `fvarId` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L717-L718","name":"Lean.exprDependsOn","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.exprDependsOn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L709-L715","name":"Lean.findLocalDeclDependsOn","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.findLocalDeclDependsOn","doc":"Similar to `findExprDependsOn`, but checks the expressions in the given local declaration\ndepends on a free variable `x` s.t. `pf x` is `true` or an unassigned metavariable `?m` s.t. `pm ?m` is true. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L701-L704","name":"Lean.findExprDependsOn","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.findExprDependsOn","doc":"Return `true` iff `e` depends on a free variable `x` s.t. `pf x` is `true`, or an unassigned metavariable `?m` s.t. `pm ?m` is true.\nFor each metavariable `?m` (that does not satisfy `pm` occurring in `x`\n1- If `?m := t`, then we visit `t` looking for `x`\n2- If `?m` is unassigned, then we consider the worst case and check whether `x` is in the local context of `?m`.\n   This case is a \"may dependency\". That is, we may assign a term `t` to `?m` s.t. `t` contains `x`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L690-L691","name":"Lean.DependsOn.main","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L636-L638","name":"Lean.DependsOn.instMonadMCtxM","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.instMonadMCtxM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L632-L632","name":"Lean.DependsOn.State.mctx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State.mctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L631-L631","name":"Lean.DependsOn.State.visited","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State.visited","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L630-L632","name":"Lean.DependsOn.State","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L621-L626","name":"Lean.instantiateLocalDeclMVars","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateLocalDeclMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L615-L619","name":"Lean.instantiateMVarDeclMVars","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVarDeclMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L604-L613","name":"Lean.instantiateLCtxMVars","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateLCtxMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L596-L602","name":"Lean.instantiateMVars","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L591-L594","name":"Lean.instantiateMVarsCore","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVarsCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L587-L589","name":"Lean.instMonadMCtxStateRefT'MetavarContextST","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instMonadMCtxStateRefT'MetavarContextST","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L517-L585","name":"Lean.instantiateExprMVars","kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.instantiateExprMVars","doc":"instantiateExprMVars main function "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L501-L514","name":"Lean.instantiateLevelMVars","kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.instantiateLevelMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L479-L480","name":"Lean.assignDelayedMVar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.assignDelayedMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L476-L477","name":"Lean.assignExprMVar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.assignExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L472-L473","name":"Lean.MVarId.assign","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.assign","doc":"Add `mvarId := x` to the metavariable assignment.\nThis method does not check whether `mvarId` is already assigned, nor it checks whether\na cycle is being introduced, or whether the expression has the right type.\nThis is a low-level API, and it is safer to use `isDefEq (mkMVar mvarId) x`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L463-L464","name":"Lean.assignLevelMVar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.assignLevelMVar","doc":"Add `mvarId := u` to the universe metavariable assignment.\nThis method does not check whether `mvarId` is already assigned, nor it checks whether\na cycle is being introduced.\nThis is a low-level API, and it is safer to use `isLevelDefEq (mkLevelMVar mvarId) u`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L443-L455","name":"Lean.hasAssignableMVar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.hasAssignableMVar","doc":"Return `true` iff expression contains a metavariable that can be assigned. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L434-L440","name":"Lean.hasAssignableLevelMVar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.hasAssignableLevelMVar","doc":"Return true iff the given level contains a metavariable that can be assigned. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L419-L431","name":"Lean.hasAssignedMVar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.hasAssignedMVar","doc":"Return `true` iff expression contains assigned (level/expr) metavariables or delayed assigned mvars "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L410-L416","name":"Lean.hasAssignedLevelMVar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.hasAssignedLevelMVar","doc":"Return true iff the given level contains an assigned metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L406-L407","name":"Lean.isExprMVarAssignable","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.isExprMVarAssignable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L400-L403","name":"Lean.MVarId.isAssignable","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isAssignable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L395-L398","name":"Lean.MetavarContext.getDecl","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L389-L393","name":"Lean.isLevelMVarAssignable","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.isLevelMVarAssignable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L386-L387","name":"Lean.isMVarDelayedAssigned","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.isMVarDelayedAssigned","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L382-L383","name":"Lean.MVarId.isDelayedAssigned","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isDelayedAssigned","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L379-L380","name":"Lean.isExprMVarAssigned","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.isExprMVarAssigned","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L375-L376","name":"Lean.MVarId.isAssigned","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isAssigned","doc":"Return `true` if the give metavariable is already assigned. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L371-L372","name":"Lean.isLevelMVarAssigned","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.isLevelMVarAssigned","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L366-L369","name":"Lean.getDelayedMVarRoot","kind":"opaque","docLink":"./Lean/MetavarContext.html#Lean.getDelayedMVarRoot","doc":"Given a sequence of delayed assignments\n```\nmvarId₁ := mvarId₂ ...;\n...\nmvarIdₙ := mvarId_root ...  -- where `mvarId_root` is not delayed assigned\n```\nin `mctx`, `getDelayedRoot mctx mvarId₁` return `mvarId_root`.\nIf `mvarId₁` is not delayed assigned then return `mvarId₁` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L355-L356","name":"Lean.getDelayedMVarAssignment?","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.getDelayedMVarAssignment?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L352-L353","name":"Lean.getExprMVarAssignment?","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.getExprMVarAssignment?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L349-L350","name":"Lean.MetavarContext.getExprAssignmentCore?","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentCore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L346-L347","name":"Lean.getLevelMVarAssignment?","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.getLevelMVarAssignment?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L343-L344","name":"Lean.setMCtx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.setMCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L339-L341","name":"Lean.instMonadMCtx","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instMonadMCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L334-L334","name":"Lean.MonadMCtx.modifyMCtx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx.modifyMCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L333-L333","name":"Lean.MonadMCtx.getMCtx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx.getMCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L332-L332","name":"Lean.MonadMCtx.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L332-L334","name":"Lean.MonadMCtx","kind":"class","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx","doc":"A monad with a stateful metavariable context, defining `getMCtx` and `modifyMCtx`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L329-L329","name":"Lean.MetavarContext.dAssignment","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.dAssignment","doc":"Assignment table for delayed abstraction metavariables.\nFor more information about delayed abstraction, see the docstring for `DelayedMetavarAssignment`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L326-L326","name":"Lean.MetavarContext.eAssignment","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.eAssignment","doc":"Assignment table for expression metavariables."},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L324-L324","name":"Lean.MetavarContext.lAssignment","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.lAssignment","doc":"Assignment table for universe level metavariables."},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L322-L322","name":"Lean.MetavarContext.userNames","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.userNames","doc":"Index mapping user-friendly names to ids. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L320-L320","name":"Lean.MetavarContext.decls","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.decls","doc":"Metavariable declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L318-L318","name":"Lean.MetavarContext.lDepth","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.lDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L317-L317","name":"Lean.MetavarContext.mvarCounter","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mvarCounter","doc":"Counter for setting the field `index` at `MetavarDecl` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L315-L315","name":"Lean.MetavarContext.levelAssignDepth","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.levelAssignDepth","doc":"At what depth level mvars can be assigned. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L313-L313","name":"Lean.MetavarContext.depth","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.depth","doc":"Depth is used to control whether an mvar can be assigned in unification. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L311-L329","name":"Lean.MetavarContext","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext","doc":"The metavariable context is a set of metavariable declarations and their assignments.\n\nFor more information on specifics see the comment in the file that `MetavarContext` is defined in.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L305-L305","name":"Lean.DelayedMetavarAssignment.mvarIdPending","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.mvarIdPending","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L304-L304","name":"Lean.DelayedMetavarAssignment.fvars","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.fvars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L303-L305","name":"Lean.DelayedMetavarAssignment","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment","doc":"A delayed assignment for a metavariable `?m`. It represents an assignment of the form `?m := (fun fvars => (mkMVar mvarIdPending))`.\n`mvarIdPending` is a `syntheticOpaque` metavariable that has not been synthesized yet. The delayed assignment becomes a real one\nas soon as `mvarIdPending` has been fully synthesized.\n`fvars` are variables in the `mvarIdPending` local context.\n\nSee the comment below `assignDelayedMVar ` for the rationale of delayed assignments.\n\nRecall that we use a locally nameless approach when dealing with binders. Suppose we are\ntrying to synthesize `?n` in the expression `e`, in the context of `(fun x => e)`.\nThe metavariable `?n` might depend on the bound variable `x`. However, since we are locally nameless,\nthe bound variable `x` is in fact represented by some free variable `fvar_x`. Thus, when we exit\nthe scope, we must rebind the value of `fvar_x` in `?n` to the de-bruijn index of the bound variable `x`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L287-L287","name":"Lean.instInhabitedMetavarDecl","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedMetavarDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L286-L286","name":"Lean.MetavarDecl.index","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.index","doc":"We use this field to track how old a metavariable is. It is set using a counter at `MetavarContext` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L284-L284","name":"Lean.MetavarDecl.numScopeArgs","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.numScopeArgs","doc":"See comment at `CheckAssignment` `Meta/ExprDefEq.lean` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L282-L282","name":"Lean.MetavarDecl.kind","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.kind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L281-L281","name":"Lean.MetavarDecl.localInstances","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.localInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L280-L280","name":"Lean.MetavarDecl.depth","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.depth","doc":"The nesting depth of this metavariable. We do not want\nunification subproblems to influence the results of parent\nproblems. The depth keeps track of this information and ensures\nthat unification subproblems cannot leak information out, by unifying\nbased on depth.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L272-L272","name":"Lean.MetavarDecl.type","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.type","doc":"The type of the metavarible, in the given `lctx`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L270-L270","name":"Lean.MetavarDecl.lctx","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.lctx","doc":"The local context containing the free variables that the mvar is permitted to depend upon. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L268-L268","name":"Lean.MetavarDecl.userName","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.userName","doc":"A user-friendly name for the metavariable. If anonymous then there is no such name. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L266-L287","name":"Lean.MetavarDecl","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl","doc":"Information about a metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L261-L263","name":"Lean.MetavarKind.isNatural","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.isNatural","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L257-L259","name":"Lean.MetavarKind.isSyntheticOpaque","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.isSyntheticOpaque","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L255-L255","name":"Lean.instReprMetavarKind","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instReprMetavarKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L255-L255","name":"Lean.instInhabitedMetavarKind","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedMetavarKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L253-L254","name":"Lean.MetavarKind.syntheticOpaque","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.syntheticOpaque","doc":"Never assigned by isDefEq "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L251-L252","name":"Lean.MetavarKind.synthetic","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.synthetic","doc":"`isDefEq` avoids assignment "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L249-L250","name":"Lean.MetavarKind.natural","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.natural","doc":"Normal unification behaviour "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L248-L255","name":"Lean.MetavarKind","kind":"inductive","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind","doc":"A kind for the metavariable that determines its unification behaviour.\nFor more information see the large comment at the beginning of this file. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L241-L244","name":"Lean.LocalInstances.erase","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.LocalInstances.erase","doc":"Remove local instance with the given `fvarId`. Do nothing if `localInsts` does not contain any free variable with id `fvarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L237-L238","name":"Lean.instHashableLocalInstance","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instHashableLocalInstance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L234-L235","name":"Lean.instBEqLocalInstance","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instBEqLocalInstance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L232-L232","name":"Lean.LocalInstances","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.LocalInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L230-L230","name":"Lean.instInhabitedLocalInstance","kind":"instance","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedLocalInstance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L229-L229","name":"Lean.LocalInstance.fvar","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance.fvar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L228-L228","name":"Lean.LocalInstance.className","kind":"def","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance.className","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L227-L230","name":"Lean.LocalInstance","kind":"structure","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance","doc":"`LocalInstance` represents a local typeclass instance registered by and for\nthe elaborator. It stores the name of the typeclass in `className`, and the\nconcrete typeclass instance in `fvar`. Note that the kernel does not care about\nthis information, since typeclasses are entirely eliminated during elaboration.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.MetavarContext.UnivMVarParamResult.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.LocalInstance.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.DependsOn.State.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.DelayedMetavarAssignment.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.MetavarContext.MkBinding.Context.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.MetavarContext.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.MetavarContext.MkBinding.State.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.MetavarDecl.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.MetavarContext.MkBindingM.Context.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.MetavarContext.LevelMVarToParam.Context.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Lean/MetavarContext.lean#L1-L1","name":"Lean.MetavarContext.LevelMVarToParam.State.mk","kind":"ctor","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State.mk","doc":""}]}