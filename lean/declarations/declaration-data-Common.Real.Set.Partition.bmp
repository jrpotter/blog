{"name":"Common.Real.Set.Partition","instances":[{"typeNames":["Nat","LinearOrderedCommMonoidWithZero.toZero","Nat","Nat.linearOrderedCommMonoidWithZero","List.length","Real","Real.Partition.xs"],"name":"Real.instNeZeroNatToZeroLinearOrderedCommMonoidWithZeroLengthRealXs","className":"NeZero"},{"typeNames":["Real","Real.Partition"],"name":"Real.Partition.instMembershipRealPartition","className":"Membership"}],"imports":["Init","Mathlib.Data.Real.Basic","Mathlib.Data.List.Sort","Common.List.Basic"],"declarations":[{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L101-L102","name":"Real.Partition.subdivision_point_mem_partition","kind":"theorem","docLink":"./Common/Real/Set/Partition.html#Real.Partition.subdivision_point_mem_partition","doc":"Every subdivision point of a `Partition` is itself a member of the `Partition`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L83-L96","name":"Real.Partition.subdivision_point_leq_right","kind":"theorem","docLink":"./Common/Real/Set/Partition.html#Real.Partition.subdivision_point_leq_right","doc":"Every subdivision point is `≤` the right-most point of the partition.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L68-L78","name":"Real.Partition.subdivision_point_geq_left","kind":"theorem","docLink":"./Common/Real/Set/Partition.html#Real.Partition.subdivision_point_geq_left","doc":"Every subdivision point is `≥` the left-most point of the partition.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L62-L63","name":"Real.Partition.instMembershipRealPartition","kind":"instance","docLink":"./Common/Real/Set/Partition.html#Real.Partition.instMembershipRealPartition","doc":"Define `∈` syntax for a `Partition`. We say a real is a member of a partition\nprovided it lies somewhere in closed interval `[a, b]`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L55-L56","name":"Real.Partition.right","kind":"def","docLink":"./Common/Real/Set/Partition.html#Real.Partition.right","doc":"The right-most subdivision point of the `Partition`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L49-L50","name":"Real.Partition.left","kind":"def","docLink":"./Common/Real/Set/Partition.html#Real.Partition.left","doc":"The left-most subdivision point of the `Partition`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L41-L42","name":"Real.instNeZeroNatToZeroLinearOrderedCommMonoidWithZeroLengthRealXs","kind":"instance","docLink":"./Common/Real/Set/Partition.html#Real.instNeZeroNatToZeroLinearOrderedCommMonoidWithZeroLengthRealXs","doc":"The length of any list associated with a `Partition` is `≠ 0`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L28-L28","name":"Real.Partition.has_min_length","kind":"def","docLink":"./Common/Real/Set/Partition.html#Real.Partition.has_min_length","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L27-L27","name":"Real.Partition.sorted","kind":"def","docLink":"./Common/Real/Set/Partition.html#Real.Partition.sorted","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L26-L26","name":"Real.Partition.xs","kind":"def","docLink":"./Common/Real/Set/Partition.html#Real.Partition.xs","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L25-L28","name":"Real.Partition","kind":"structure","docLink":"./Common/Real/Set/Partition.html#Real.Partition","doc":"A `Partition` is some finite subset of `[a, b]` containing points `a` and `b`.\n\nIt is assumed that the points of the `Partition` are distinct and sorted. The\nuse of a `List` ensures finite-ness.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/d601793e5e2b35e197310e88f26e6d0ceb03750f/Common/Real/Set/Partition.lean#L1-L1","name":"Real.Partition.mk","kind":"ctor","docLink":"./Common/Real/Set/Partition.html#Real.Partition.mk","doc":""}]}