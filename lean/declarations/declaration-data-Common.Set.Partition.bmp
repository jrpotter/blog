{"name":"Common.Set.Partition","instances":[],"imports":["Init","Mathlib.Data.Finset.Basic","Mathlib.Data.List.Sort","Mathlib.Data.Set.Intervals.Basic","Common.List.Basic","Common.List.NonEmpty","Common.Set.Interval"],"declarations":[{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/6deeb57409ba5eb288188072fe84fab9ecb6c2d1/Common/Set/Partition.lean#L37-L37","name":"Set.Partition.right","kind":"def","docLink":"./Common/Set/Partition.html#Set.Partition.right","doc":"Return the right-most endpoint of the `Partition`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/6deeb57409ba5eb288188072fe84fab9ecb6c2d1/Common/Set/Partition.lean#L32-L32","name":"Set.Partition.left","kind":"def","docLink":"./Common/Set/Partition.html#Set.Partition.left","doc":"Return the left-most endpoint of the `Partition`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/6deeb57409ba5eb288188072fe84fab9ecb6c2d1/Common/Set/Partition.lean#L25-L25","name":"Set.Partition.connected","kind":"def","docLink":"./Common/Set/Partition.html#Set.Partition.connected","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/6deeb57409ba5eb288188072fe84fab9ecb6c2d1/Common/Set/Partition.lean#L24-L24","name":"Set.Partition.ivls","kind":"def","docLink":"./Common/Set/Partition.html#Set.Partition.ivls","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/6deeb57409ba5eb288188072fe84fab9ecb6c2d1/Common/Set/Partition.lean#L23-L23","name":"Set.Partition.mk","kind":"ctor","docLink":"./Common/Set/Partition.html#Set.Partition.mk","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/6deeb57409ba5eb288188072fe84fab9ecb6c2d1/Common/Set/Partition.lean#L23-L25","name":"Set.Partition","kind":"structure","docLink":"./Common/Set/Partition.html#Set.Partition","doc":"A `Partition` is a finite subset of `[a, b]` containing points `a` and `b`.\n\nWe use a `List.NonEmpty` internally to ensure the existence of at least one\n`Interval`, which cannot be empty. Thus our `Partition` can never be empty.\nThe intervals are sorted via the `connected` proposition.\n"}]}