{"name":"Common.List.Basic","instances":[],"imports":["Init","Mathlib.Data.Fintype.Basic","Mathlib.Tactic.NormNum"],"declarations":[{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L262-L290","name":"List.mem_pairwise_imp_exists_adjacent","kind":"theorem","docLink":"./Common/List/Basic.html#List.mem_pairwise_imp_exists_adjacent","doc":"If `x` is a member of a `pairwise`'d list, there must exist two (adjacent)\nentries of the list, say `x₁` and `x₂`, such that `x = f x₁ x₂`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L247-L256","name":"List.mem_pairwise_imp_length_self_ge_two","kind":"theorem","docLink":"./Common/List/Basic.html#List.mem_pairwise_imp_length_self_ge_two","doc":"If a `pairwise`'d `List` isn't empty, then the input `List` must have at least\ntwo entries.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L232-L241","name":"List.len_pairwise_len_cons_sub_one","kind":"theorem","docLink":"./Common/List/Basic.html#List.len_pairwise_len_cons_sub_one","doc":"If `List` `xs` is nonempty, then any `pairwise` operation on `xs` has length\n`xs.length - 1`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L222-L226","name":"List.len_pairwise_len_nil_eq_zero","kind":"theorem","docLink":"./Common/List/Basic.html#List.len_pairwise_len_nil_eq_zero","doc":"If `List` `xs` is empty, then any `pairwise` operation on `xs` yields an empty\n`List`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L213-L216","name":"List.pairwise","kind":"def","docLink":"./Common/List/Basic.html#List.pairwise","doc":"Given a `List` `xs` of length `k`, this function produces a `List` of length\n`k - 1` where the `i`th member of the resulting `List` is `f xs[i] xs[i + 1]`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L201-L205","name":"List.fin_zipWith_imp_val_lt_length_right","kind":"theorem","docLink":"./Common/List/Basic.html#List.fin_zipWith_imp_val_lt_length_right","doc":"An index less than the length of a `zipWith` is less than the length of the left\noperand.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L191-L195","name":"List.fin_zipWith_imp_val_lt_length_left","kind":"theorem","docLink":"./Common/List/Basic.html#List.fin_zipWith_imp_val_lt_length_left","doc":"An index less than the length of a `zipWith` is less than the length of the left\noperand.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L171-L185","name":"List.zipWith_nonempty_iff_args_nonempty","kind":"theorem","docLink":"./Common/List/Basic.html#List.zipWith_nonempty_iff_args_nonempty","doc":"The output `List` of a `zipWith` is nonempty **iff** both of its inputs are\nnonempty.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L160-L165","name":"List.length_zipWith_self_tail_eq_length_sub_one","kind":"theorem","docLink":"./Common/List/Basic.html#List.length_zipWith_self_tail_eq_length_sub_one","doc":"The length of a zip consisting of a `List` and its tail is the length of the\n`List`'s tail.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L148-L152","name":"List.some_tail?_imp_cons","kind":"theorem","docLink":"./Common/List/Basic.html#List.some_tail?_imp_cons","doc":"If a `List` has a `tail?` defined, it must be nonempty.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L133-L143","name":"List.getLast_eq_get_length_sub_one","kind":"theorem","docLink":"./Common/List/Basic.html#List.getLast_eq_get_length_sub_one","doc":"The last entry of a nonempty `List` has index `1` less than its length.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L124-L128","name":"List.head_eq_get_zero","kind":"theorem","docLink":"./Common/List/Basic.html#List.head_eq_get_zero","doc":"The first entry of a nonempty `List` has index `0`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L103-L117","name":"List.mem_iff_exists_get","kind":"theorem","docLink":"./Common/List/Basic.html#List.mem_iff_exists_get","doc":"A value `x` is a member of `List` `xs` **iff** there exists some index `i` such\nthat `x = xs[i]`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L78-L97","name":"List.get_mem_self","kind":"theorem","docLink":"./Common/List/Basic.html#List.get_mem_self","doc":"If `i` is a valid index of `List` `xs`, then `xs[i]` is a member of `xs`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L66-L73","name":"List.exists_mem_iff_neq_nil","kind":"theorem","docLink":"./Common/List/Basic.html#List.exists_mem_iff_neq_nil","doc":"There exists a member of a `List` **iff** the `List` is nonempty.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L53-L59","name":"List.neq_nil_iff_length_gt_zero","kind":"theorem","docLink":"./Common/List/Basic.html#List.neq_nil_iff_length_gt_zero","doc":"A `List` is nonempty **iff** it has length greater than zero.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L40-L48","name":"List.eq_nil_iff_length_zero","kind":"theorem","docLink":"./Common/List/Basic.html#List.eq_nil_iff_length_zero","doc":"A `List` is empty **iff** it has length zero.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L27-L35","name":"List.self_neq_nil_imp_exists_mem","kind":"theorem","docLink":"./Common/List/Basic.html#List.self_neq_nil_imp_exists_mem","doc":"A `List` is nonempty **iff** it can be written as some head concatenated with\nsome tail.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/1da6e31581e3b2b1bf92e8bd2fe4f4f0187dd074/Common/List/Basic.lean#L17-L19","name":"List.get_cons_succ_self_eq_get_tail_self","kind":"theorem","docLink":"./Common/List/Basic.html#List.get_cons_succ_self_eq_get_tail_self","doc":"Getting the `(i + 1)`st entry of a `List` is equivalent to getting the `i`th\nentry of the `List`'s tail.\n"}]}