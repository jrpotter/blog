{"name":"Init.NotationExtra","instances":[{"typeNames":["Lean.Loop","Unit"],"name":"Lean.instForInLoopUnit","className":"ForIn"}],"imports":["Init.Meta","Init.Data.Array.Subarray","Init.Data.ToString"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L425-L426","name":"Lean.«term_Matches_|»","kind":"def","docLink":"./Init/NotationExtra.html#Lean.«term_Matches_|»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L420-L420","name":"Lean.doElemRepeat__Until_","kind":"def","docLink":"./Init/NotationExtra.html#Lean.doElemRepeat__Until_","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L415-L415","name":"Lean.doElemWhile_Do_","kind":"def","docLink":"./Init/NotationExtra.html#Lean.doElemWhile_Do_","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L410-L410","name":"Lean.«doElemWhile_:_Do_»","kind":"def","docLink":"./Init/NotationExtra.html#Lean.«doElemWhile_:_Do_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L405-L405","name":"Lean.doElemRepeat_","kind":"def","docLink":"./Init/NotationExtra.html#Lean.doElemRepeat_","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L402-L403","name":"Lean.instForInLoopUnit","kind":"instance","docLink":"./Init/NotationExtra.html#Lean.instForInLoopUnit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L396-L399","name":"Lean.Loop.forIn.loop","kind":"opaque","docLink":"./Init/NotationExtra.html#Lean.Loop.forIn.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L395-L400","name":"Lean.Loop.forIn","kind":"def","docLink":"./Init/NotationExtra.html#Lean.Loop.forIn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L392-L392","name":"Lean.Loop.mk","kind":"ctor","docLink":"./Init/NotationExtra.html#Lean.Loop.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L391-L392","name":"Lean.Loop","kind":"inductive","docLink":"./Init/NotationExtra.html#Lean.Loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L380-L383","name":"solve","kind":"def","docLink":"./Init/NotationExtra.html#solve","doc":"Similar to `first`, but succeeds only if one the given tactics solves the current goal.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L377-L378","name":"cdot","kind":"def","docLink":"./Init/NotationExtra.html#cdot","doc":"`· tac` focuses on the main goal and tries to solve it using `tac`, or else fails. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L376-L376","name":"cdotTk","kind":"def","docLink":"./Init/NotationExtra.html#cdotTk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L355-L368","name":"Lean.Parser.Command.classAbbrev","kind":"def","docLink":"./Init/NotationExtra.html#Lean.Parser.Command.classAbbrev","doc":"Expands\n```\nclass abbrev C <params> := D_1, ..., D_n\n```\ninto\n```\nclass C <params> extends D_1, ..., D_n\nattribute [instance] C.mk\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L323-L336","name":"tacticFunext___","kind":"def","docLink":"./Init/NotationExtra.html#tacticFunext___","doc":"Apply function extensionality and introduce new hypotheses.\nThe tactic `funext` will keep applying the `funext` lemma until the goal target is not reducible to\n```\n  |-  ((fun x => ...) = (fun x => ...))\n```\nThe variant `funext h₁ ... hₙ` applies `funext` `n` times, and uses the given identifiers to name the new hypotheses.\nPatterns can be used like in the `intro` tactic. Example, given a goal\n```\n  |-  ((fun x : Nat × Bool => ...) = (fun x => ...))\n```\n`funext (a, b)` applies `funext` once and performs pattern matching on the newly introduced pair.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L319-L321","name":"unexpandMkArray8","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray8","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L315-L317","name":"unexpandMkArray7","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray7","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L311-L313","name":"unexpandMkArray6","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray6","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L307-L309","name":"unexpandMkArray5","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray5","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L303-L305","name":"unexpandMkArray4","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray4","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L299-L301","name":"unexpandMkArray3","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray3","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L295-L297","name":"unexpandMkArray2","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L291-L293","name":"unexpandMkArray1","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L288-L289","name":"unexpandMkArray0","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkArray0","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L285-L286","name":"unexpandArrayEmpty","kind":"def","docLink":"./Init/NotationExtra.html#unexpandArrayEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L281-L283","name":"unexpandMkStr8","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkStr8","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L277-L279","name":"unexpandMkStr7","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkStr7","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L273-L275","name":"unexpandMkStr6","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkStr6","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L269-L271","name":"unexpandMkStr5","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkStr5","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L265-L267","name":"unexpandMkStr4","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkStr4","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L261-L263","name":"unexpandMkStr3","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkStr3","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L257-L259","name":"unexpandMkStr2","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkStr2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L253-L255","name":"unexpandMkStr1","kind":"def","docLink":"./Init/NotationExtra.html#unexpandMkStr1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L249-L251","name":"unexpandGetElem?","kind":"def","docLink":"./Init/NotationExtra.html#unexpandGetElem?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L245-L247","name":"unexpandGetElem!","kind":"def","docLink":"./Init/NotationExtra.html#unexpandGetElem!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L241-L243","name":"unexpandGetElem","kind":"def","docLink":"./Init/NotationExtra.html#unexpandGetElem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L237-L239","name":"unexpandTSepArray","kind":"def","docLink":"./Init/NotationExtra.html#unexpandTSepArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L233-L235","name":"unexpandTSyntaxArray","kind":"def","docLink":"./Init/NotationExtra.html#unexpandTSyntaxArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L229-L231","name":"unexpandTSyntax","kind":"def","docLink":"./Init/NotationExtra.html#unexpandTSyntax","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L224-L227","name":"unexpandSubtype","kind":"def","docLink":"./Init/NotationExtra.html#unexpandSubtype","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L220-L222","name":"unexpandPSigma","kind":"def","docLink":"./Init/NotationExtra.html#unexpandPSigma","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L216-L218","name":"unexpandSigma","kind":"def","docLink":"./Init/NotationExtra.html#unexpandSigma","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L210-L214","name":"unexpandExists","kind":"def","docLink":"./Init/NotationExtra.html#unexpandExists","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L206-L208","name":"unexpandEqRec","kind":"def","docLink":"./Init/NotationExtra.html#unexpandEqRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L202-L204","name":"unexpandEqNDRec","kind":"def","docLink":"./Init/NotationExtra.html#unexpandEqNDRec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L197-L200","name":"unexpandSorryAx","kind":"def","docLink":"./Init/NotationExtra.html#unexpandSorryAx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L193-L195","name":"unexpandIte","kind":"def","docLink":"./Init/NotationExtra.html#unexpandIte","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L188-L191","name":"unexpandProdMk","kind":"def","docLink":"./Init/NotationExtra.html#unexpandProdMk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L184-L186","name":"unexpandListToArray","kind":"def","docLink":"./Init/NotationExtra.html#unexpandListToArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L179-L182","name":"unexpandListCons","kind":"def","docLink":"./Init/NotationExtra.html#unexpandListCons","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L176-L177","name":"unexpandListNil","kind":"def","docLink":"./Init/NotationExtra.html#unexpandListNil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L173-L174","name":"unexpandUnit","kind":"def","docLink":"./Init/NotationExtra.html#unexpandUnit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L134-L171","name":"calcTactic","kind":"def","docLink":"./Init/NotationExtra.html#calcTactic","doc":"Step-wise reasoning over transitive relations.\n```\ncalc\n  a = b := pab\n  b = c := pbc\n  ...\n  y = z := pyz\n```\nproves `a = z` from the given step-wise proofs. `=` can be replaced with any\nrelation implementing the typeclass `Trans`. Instead of repeating the right-\nhand sides, subsequent left-hand sides can be replaced with `_`.\n```\ncalc\n  a = b := pab\n  _ = c := pbc\n  ...\n  _ = z := pyz\n```\nIt is also possible to write the *first* relation as `<lhs>\\n  _ = <rhs> :=\n<proof>`. This is useful for aligning relation symbols:\n```\ncalc abc\n  _ = bce := pabce\n  _ = cef := pbcef\n  ...\n  _ = xyz := pwxyz\n```\n\n`calc` has term mode and tactic mode variants. This is the tactic mode variant,\nwhich supports an additional feature: it works even if the goal is `a = z'`\nfor some other `z'`; in this case it will not close the goal but will instead\nleave a subgoal proving `z = z'`.\n\nSee [Theorem Proving in Lean 4][tpil4] for more information.\n\n[tpil4]: https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#calculational-proofs\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L97-L132","name":"calc","kind":"def","docLink":"./Init/NotationExtra.html#calc","doc":"Step-wise reasoning over transitive relations.\n```\ncalc\n  a = b := pab\n  b = c := pbc\n  ...\n  y = z := pyz\n```\nproves `a = z` from the given step-wise proofs. `=` can be replaced with any\nrelation implementing the typeclass `Trans`. Instead of repeating the right-\nhand sides, subsequent left-hand sides can be replaced with `_`.\n```\ncalc\n  a = b := pab\n  _ = c := pbc\n  ...\n  _ = z := pyz\n```\nIt is also possible to write the *first* relation as `<lhs>\\n  _ = <rhs> :=\n<proof>`. This is useful for aligning relation symbols, especially on longer:\nidentifiers:\n```\ncalc abc\n  _ = bce := pabce\n  _ = cef := pbcef\n  ...\n  _ = xyz := pwxyz\n```\n\n`calc` has term mode and tactic mode variants. This is the term mode variant.\n\nSee [Theorem Proving in Lean 4][tpil4] for more information.\n\n[tpil4]: https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#calculational-proofs\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L95-L95","name":"calcSteps","kind":"def","docLink":"./Init/NotationExtra.html#calcSteps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L94-L94","name":"calcStep","kind":"def","docLink":"./Init/NotationExtra.html#calcStep","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L92-L92","name":"calcFirstStep","kind":"def","docLink":"./Init/NotationExtra.html#calcFirstStep","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L88-L88","name":"«term_×'_»","kind":"def","docLink":"./Init/NotationExtra.html#«term_×'_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L87-L87","name":"«term_×__1»","kind":"def","docLink":"./Init/NotationExtra.html#«term_×__1»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L86-L86","name":"«termΣ'_,_»","kind":"def","docLink":"./Init/NotationExtra.html#«termΣ'_,_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L85-L85","name":"«termΣ_,_»","kind":"def","docLink":"./Init/NotationExtra.html#«termΣ_,_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L84-L84","name":"«termExists_,_»","kind":"def","docLink":"./Init/NotationExtra.html#«termExists_,_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L83-L83","name":"«term∃_,_»","kind":"def","docLink":"./Init/NotationExtra.html#«term∃_,_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L67-L68","name":"Lean.«command__Unif_hint____Where_|-⊢_»","kind":"def","docLink":"./Init/NotationExtra.html#Lean.«command__Unif_hint____Where_|-⊢_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L65-L65","name":"Lean.unifConstraintElem","kind":"def","docLink":"./Init/NotationExtra.html#Lean.unifConstraintElem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L64-L64","name":"Lean.unifConstraint","kind":"def","docLink":"./Init/NotationExtra.html#Lean.unifConstraint","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L60-L62","name":"Lean.expandBrackedBinders","kind":"def","docLink":"./Init/NotationExtra.html#Lean.expandBrackedBinders","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L48-L58","name":"Lean.expandExplicitBinders","kind":"def","docLink":"./Init/NotationExtra.html#Lean.expandExplicitBinders","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L39-L45","name":"Lean.expandBrackedBindersAux.loop","kind":"def","docLink":"./Init/NotationExtra.html#Lean.expandBrackedBindersAux.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L38-L46","name":"Lean.expandBrackedBindersAux","kind":"def","docLink":"./Init/NotationExtra.html#Lean.expandBrackedBindersAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L25-L35","name":"Lean.expandExplicitBindersAux.loop","kind":"def","docLink":"./Init/NotationExtra.html#Lean.expandExplicitBindersAux.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L24-L36","name":"Lean.expandExplicitBindersAux","kind":"def","docLink":"./Init/NotationExtra.html#Lean.expandExplicitBindersAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L21-L21","name":"Lean.explicitBinders","kind":"def","docLink":"./Init/NotationExtra.html#Lean.explicitBinders","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L20-L20","name":"Lean.bracketedExplicitBinders","kind":"def","docLink":"./Init/NotationExtra.html#Lean.bracketedExplicitBinders","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L19-L19","name":"Lean.unbracketedExplicitBinders","kind":"def","docLink":"./Init/NotationExtra.html#Lean.unbracketedExplicitBinders","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9ec9ea61a4ebbcd2672b8905e7c583958113e24e/src/Init/NotationExtra.lean#L14-L15","name":"Lean.«termMacro.trace[_]_»","kind":"def","docLink":"./Init/NotationExtra.html#Lean.«termMacro.trace[_]_»","doc":""}]}