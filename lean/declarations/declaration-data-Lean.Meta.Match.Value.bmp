{"name":"Lean.Meta.Match.Value","instances":[],"imports":["Init","Lean.Expr"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Lean/Meta/Match/Value.lean#L44-L45","name":"Lean.Meta.isMatchValue","kind":"def","docLink":"./Lean/Meta/Match/Value.html#Lean.Meta.isMatchValue","doc":"Return true is `e` is a term that should be processed by the `match`-compiler using `casesValues` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Lean/Meta/Match/Value.lean#L37-L40","name":"Lean.Meta.foldPatValue","kind":"def","docLink":"./Lean/Meta/Match/Value.html#Lean.Meta.foldPatValue","doc":"The frontend expands uint numerals occurring in patterns into `UInt*.mk ..` contructor applications.\nThis method convert them back into `UInt*.ofNat ..` applications.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Lean/Meta/Match/Value.lean#L30-L31","name":"Lean.Meta.isUIntPatLit","kind":"def","docLink":"./Lean/Meta/Match/Value.html#Lean.Meta.isUIntPatLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Lean/Meta/Match/Value.lean#L21-L28","name":"Lean.Meta.isUIntPatLit?","kind":"def","docLink":"./Lean/Meta/Match/Value.html#Lean.Meta.isUIntPatLit?","doc":"Return `some (typeName, numLit)` if `v` is of the form `UInt*.mk (Fin.ofNat _ numLit)` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Lean/Meta/Match/Value.lean#L17-L18","name":"Lean.Meta.isFinPatLit","kind":"def","docLink":"./Lean/Meta/Match/Value.html#Lean.Meta.isFinPatLit","doc":""}]}