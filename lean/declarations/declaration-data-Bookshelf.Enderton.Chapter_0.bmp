{"name":"Bookshelf.Enderton.Chapter_0","instances":[{"typeNames":["Enderton.Chapter_0.GTuple"],"name":"Enderton.Chapter_0.GTuple.BEq","className":"BEq"}],"imports":["Init","Common.LTuple.Basic"],"declarations":[{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L236-L274","name":"Enderton.Chapter_0.lemma_0a","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.lemma_0a","doc":"#### Lemma 0A\n\nAssume that `⟨x₁, ..., xₘ⟩ = ⟨y₁, ..., yₘ, ..., yₘ₊ₖ⟩`. Then\n`x₁ = ⟨y₁, ..., yₖ₊₁⟩`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L168-L170","name":"Enderton.Chapter_0.GTuple.snd","kind":"def","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.snd","doc":"Returns the first component of our `GTuple`. For example, the first component of\ntuple `x[x[1, 2], 3, 4]` is `t[3, 4]`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L159-L162","name":"Enderton.Chapter_0.GTuple.norm_eq_fst_eq_take","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.norm_eq_fst_eq_take","doc":"If the normal form of an `GTuple` is equal to a `Tuple`, the `fst` component\nmust be a prefix of the `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L143-L153","name":"Enderton.Chapter_0.GTuple.self_fst_eq_norm_take","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.self_fst_eq_norm_take","doc":"Given `GTuple α (m, n)`, the `fst` component is equal to an initial segment of\nsize `k` of the tuple in normal form.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L135-L137","name":"Enderton.Chapter_0.GTuple.fst","kind":"def","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.fst","doc":"Returns the first component of our `GTuple`. For example, the first component of\ntuple `x[x[1, 2], 3, 4]` is `t[1, 2]`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L126-L129","name":"Enderton.Chapter_0.GTuple.length","kind":"def","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.length","doc":"Returns the number of entries in the \"shallowest\" portion of the `GTuple`. For\nexample, the length of `x[x[1, 2], 3, 4]` is `3`, despite its size being `4`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L120-L120","name":"Enderton.Chapter_0.GTuple.size","kind":"def","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.size","doc":"Returns the number of entries in the `GTuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L112-L113","name":"Enderton.Chapter_0.GTuple.BEq","kind":"instance","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.BEq","doc":"Implements Boolean equality for `GTuple α n` provided `α` has decidable\nequality.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L102-L104","name":"Enderton.Chapter_0.GTuple.norm_snoc_eq_concat","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.norm_snoc_eq_concat","doc":"Normalizing an `GTuple` is equivalent to concatenating the normalized `fst`\ncomponent with the `snd`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L93-L96","name":"Enderton.Chapter_0.GTuple.norm_snoc_snoc_norm","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.norm_snoc_snoc_norm","doc":"Normalization distributes across `Tuple.snoc` calls.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L85-L88","name":"Enderton.Chapter_0.GTuple.norm_nil_snoc_elim","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.norm_nil_snoc_elim","doc":"Normalization eliminates `snoc` when the `fst` component is `nil`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L74-L80","name":"Enderton.Chapter_0.GTuple.norm_snoc_nil_elim","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.norm_snoc_nil_elim","doc":"Normalization elimates `snoc` when the `snd` component is `nil`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L67-L69","name":"Enderton.Chapter_0.GTuple.norm_snoc_nil_nil_eq_nil","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.norm_snoc_nil_nil_eq_nil","doc":"Normalization of a pseudo-empty `GTuple` yields an empty `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L61-L62","name":"Enderton.Chapter_0.GTuple.norm_nil_eq_nil","kind":"theorem","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.norm_nil_eq_nil","doc":"Normalization of an empty `GTuple` yields an empty `Tuple`.\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L54-L56","name":"Enderton.Chapter_0.GTuple.norm","kind":"def","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.norm","doc":"Converts an `GTuple` into \"normal form\".\n"},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L37-L37","name":"Enderton.Chapter_0.«termG[_]»","kind":"def","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.«termG[_]»","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L30-L30","name":"Enderton.Chapter_0.«termT[_]»","kind":"def","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.«termT[_]»","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L28-L28","name":"Enderton.Chapter_0.GTuple.snoc","kind":"ctor","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.snoc","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L27-L27","name":"Enderton.Chapter_0.GTuple.nil","kind":"ctor","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple.nil","doc":""},{"sourceLink":"https://github.com/jrpotter/bookshelf/blob/53a0bd1ebc189cb6bd5e72ad100b9419a82bae6c/Bookshelf/Enderton/Chapter_0.lean#L26-L28","name":"Enderton.Chapter_0.GTuple","kind":"inductive","docLink":"./Bookshelf/Enderton/Chapter_0.html#Enderton.Chapter_0.GTuple","doc":"The following describes a so-called \"generic\" tuple. Like an `LTuple`, a generic\n`n`-tuple is defined recursively like so:\n\n  `⟨x₁, ..., xₙ⟩ = ⟨⟨x₁, ..., xₙ₋₁⟩, xₙ⟩`\n\nUnlike `LTuple`, this tuple bends the syntax above further. For example,\nboth tuples above are equivalent to:\n\n  `⟨⟨x₁, ..., xₘ⟩, xₘ₊₁, ..., xₙ⟩`\n\nfor some `1 ≤ m ≤ n`. This distinction is purely syntactic, and introduced\nsolely to prove `lemma_0a`. In other words, `LTuple` is an always-normalized\nvariant of an `GTuple`. In general, prefer it over this when working within\nEnderton's book.\n"}]}