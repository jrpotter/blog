{"name":"Init.Data.Int.Basic","instances":[{"typeNames":["Nat","Int"],"name":"instCoeNatInt","className":"Coe"},{"typeNames":["Int"],"name":"instOfNatInt","className":"OfNat"},{"typeNames":["Int"],"name":"Int.instInhabitedInt","className":"Inhabited"},{"typeNames":["Int"],"name":"Int.instNegInt","className":"Neg"},{"typeNames":["Int"],"name":"Int.instAddInt","className":"Add"},{"typeNames":["Int"],"name":"Int.instMulInt","className":"Mul"},{"typeNames":["Int"],"name":"Int.instSubInt","className":"Sub"},{"typeNames":["Int"],"name":"Int.instLEInt","className":"LE"},{"typeNames":["Int"],"name":"Int.instLTInt","className":"LT"},{"typeNames":["Eq","Int"],"name":"Int.instDecidableEqInt","className":"Decidable"},{"typeNames":["LE.le","Int","Int.instLEInt"],"name":"Int.decLe","className":"Decidable"},{"typeNames":["LT.lt","Int","Int.instLTInt"],"name":"Int.decLt","className":"Decidable"},{"typeNames":["Int"],"name":"Int.instDivInt","className":"Div"},{"typeNames":["Int"],"name":"Int.instModInt","className":"Mod"},{"typeNames":["Int","Nat","Int"],"name":"Int.instHPowIntNat","className":"HPow"},{"typeNames":["Int","instBEq","Int","Int.instDecidableEqInt"],"name":"Int.instLawfulBEqIntInstBEqInstDecidableEqInt","className":"LawfulBEq"},{"typeNames":["Int"],"name":"Int.instMinInt","className":"Min"},{"typeNames":["Int"],"name":"Int.instMaxInt","className":"Max"}],"imports":["Init.Coe","Init.Data.Nat.Div","Init.Data.List.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L359-L359","name":"Int.instMaxInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMaxInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L357-L357","name":"Int.instMinInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMinInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L353-L355","name":"Int.instLawfulBEqIntInstBEqInstDecidableEqInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLawfulBEqIntInstBEqInstDecidableEqInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L350-L351","name":"Int.instHPowIntNat","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instHPowIntNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L346-L348","name":"Int.pow","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.pow","doc":"Power of an integer to some natural number.\n\n```\n#eval (2 : Int) ^ 4 -- 16\n#eval (10 : Int) ^ 0 -- 1\n#eval (0 : Int) ^ 10 -- 0\n#eval (-7 : Int) ^ 3 -- -343\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L333-L335","name":"Int.toNat","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.toNat","doc":"Turns an integer into a natural number, negative numbers become\n`0`.\n\n```\n#eval (7 : Int).toNat -- 7\n#eval (0 : Int).toNat -- 0\n#eval (-7 : Int).toNat -- 0\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L321-L322","name":"Int.instModInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instModInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L315-L319","name":"Int.mod","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.mod","doc":"Integer modulo. This function uses the\n[*\"T-rounding\"*][t-rounding] (**T**runcation-rounding) convention\nto pair with `Int.div`, meaning that `a % b + b * (a / b) = a`\nunconditionally (see [`Int.mod_add_div`][theo mod_add_div]). In\nparticular, `a % 0 = a`.\n\n[t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862\n[theo mod_add_div]: https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mod_add_div#doc\n\nExamples:\n\n```\n#eval (7 : Int) % (0 : Int) -- 7\n#eval (0 : Int) % (7 : Int) -- 0\n\n#eval (12 : Int) % (6 : Int) -- 0\n#eval (12 : Int) % (-6 : Int) -- 0\n#eval (-12 : Int) % (6 : Int) -- 0\n#eval (-12 : Int) % (-6 : Int) -- 0\n\n#eval (12 : Int) % (7 : Int) -- 5\n#eval (12 : Int) % (-7 : Int) -- 5\n#eval (-12 : Int) % (7 : Int) -- 2\n#eval (-12 : Int) % (-7 : Int) -- 2\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L284-L285","name":"Int.instDivInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instDivInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L278-L282","name":"Int.div","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.div","doc":"Integer division. This function uses the\n[*\"T-rounding\"*][t-rounding] (**T**runcation-rounding) convention,\nmeaning that it rounds toward zero. Also note that division by zero\nis defined to equal zero.\n\nThe relation between integer division and modulo is found in [the\n`Int.mod_add_div` theorem in std][theo mod_add_div] which states\nthat `a % b + b * (a / b) = a`, unconditionally.\n\n[t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862\n[theo mod_add_div]: https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.mod_add_div#doc\n\nExamples:\n\n```\n#eval (7 : Int) / (0 : Int) -- 0\n#eval (0 : Int) / (7 : Int) -- 0\n\n#eval (12 : Int) / (6 : Int) -- 2\n#eval (12 : Int) / (-6 : Int) -- -2\n#eval (-12 : Int) / (6 : Int) -- -2\n#eval (-12 : Int) / (-6 : Int) -- 2\n\n#eval (12 : Int) / (7 : Int) -- 1\n#eval (12 : Int) / (-7 : Int) -- -1\n#eval (-12 : Int) / (7 : Int) -- -2\n#eval (-12 : Int) / (-7 : Int) -- 2\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L242-L245","name":"Int.natAbs","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.natAbs","doc":"Absolute value (`Nat`) of an integer.\n\n```\n#eval (7 : Int).natAbs -- 7\n#eval (0 : Int).natAbs -- 0\n#eval (-11 : Int).natAbs -- 11\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L228-L229","name":"Int.decLt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.decLt","doc":"Decides whether `a < b`.\n\n```\n#eval `¬ ( (7 : Int) < 0 )` -- true\n#eval `¬ ( (0 : Int) < 0 )` -- true\n#eval `(7 : Int) < 10` -- true\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L215-L216","name":"Int.decLe","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.decLe","doc":"Decides whether `a ≤ b`.\n\n```\n#eval ¬ ( (7 : Int) ≤ (0 : Int) ) -- true\n#eval (0 : Int) ≤ (0 : Int) -- true\n#eval (7 : Int) ≤ (10 : Int) -- true\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L187-L187","name":"Int.instDecidableEqInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instDecidableEqInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L176-L185","name":"Int.decEq","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.decEq","doc":"Decides equality between two `Int`s.\n\n```\n#eval (7 : Int) = (3 : Int) + (4 : Int) -- true\n#eval (6 : Int) = (3 : Int) * (2 : Int) -- true\n#eval ¬ (6 : Int) = (3 : Int) -- true\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L162-L163","name":"Int.instLTInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLTInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L160-L160","name":"Int.lt","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.lt","doc":"Definition of `a < b`, encoded as `a + 1 ≤ b`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L156-L157","name":"Int.instLEInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLEInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L154-L154","name":"Int.le","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.le","doc":"Definition of `a ≤ b`, encoded as `b - a ≥ 0`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L150-L151","name":"Int.NonNeg.mk","kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.NonNeg.mk","doc":"Sole constructor, proving that `ofNat n` is positive. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L149-L151","name":"Int.NonNeg","kind":"inductive","docLink":"./Init/Data/Int/Basic.html#Int.NonNeg","doc":"A proof that an `Int` is non-negative. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L145-L146","name":"Int.instSubInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instSubInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L142-L143","name":"Int.sub","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.sub","doc":"Subtraction of two integers.\n\n```\n#eval (63 : Int) - (6 : Int) -- 57\n#eval (7 : Int) - (0 : Int) -- 7\n#eval (0 : Int) - (7 : Int) -- -7\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L129-L130","name":"Int.instMulInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMulInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L122-L127","name":"Int.mul","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.mul","doc":"Multiplication of two integers.\n\n```\n#eval (63 : Int) * (6 : Int) -- 378\n#eval (6 : Int) * (-6 : Int) -- -36\n#eval (7 : Int) * (0 : Int) -- 0\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L108-L109","name":"Int.instAddInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instAddInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L101-L106","name":"Int.add","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.add","doc":"Addition of two integers.\n\n```\n#eval (7 : Int) + (6 : Int) -- 13\n#eval (6 : Int) + (-6 : Int) -- 0\n```\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L86-L89","name":"Int.subNatNat","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.subNatNat","doc":"Subtraction of two natural numbers. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L82-L83","name":"Int.instNegInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instNegInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L68-L71","name":"Int.neg","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.neg","doc":"Negation of an integer.\n\nImplemented by efficient native code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L59-L61","name":"Int.negOfNat","kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.negOfNat","doc":"Negation of a natural number. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L56-L56","name":"Int.instInhabitedInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instInhabitedInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L52-L53","name":"instOfNatInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#instOfNatInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L50-L50","name":"instCoeNatInt","kind":"instance","docLink":"./Init/Data/Int/Basic.html#instCoeNatInt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L43-L45","name":"Int.negSucc","kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.negSucc","doc":"The negation of the successor of a natural number is an integer\n(`-1` to `-∞`). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L41-L42","name":"Int.ofNat","kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.ofNat","doc":"A natural number is an integer (`0` to `∞`). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/445fd417be4df8f69f1b97b5426bd5ef97d28138/src/Init/Data/Int/Basic.lean#L40-L45","name":"Int","kind":"inductive","docLink":"./Init/Data/Int/Basic.html#Int","doc":"The type of integers. It is defined as an inductive type based on the\nnatural number type `Nat` featuring two constructors: \"a natural\nnumber is an integer\", and \"the negation of a successor of a natural\nnumber is an integer\". The former represents integers between `0`\n(inclusive) and `∞`, and the latter integers between `-∞` and `-1`\n(inclusive).\n\nThis type is special-cased by the compiler. The runtime has a special\nrepresentation for `Int` which stores \"small\" signed numbers directly,\nand larger numbers use an arbitrary precision \"bignum\" library\n(usually [GMP](https://gmplib.org/)). A \"small number\" is an integer\nthat can be encoded with 63 bits (31 bits on 32-bits architectures).\n"}]}